
pub const DISTANCES : [[usize; 15]; 15] = [
    [0, 1, 3, 4, 3, 5, 6, 5, 7, 8, 7, 9, 10, 9, 10], // From 0
    [1, 0, 2, 3, 2, 4, 5, 4, 6, 7, 6, 8, 9, 8, 9], // From1
    [3, 2, 0, 1, 2, 4, 5, 4, 6, 7, 6, 8, 9, 8, 9], // From 2
    [4, 3, 1, 0, 3, 5, 6, 5, 7, 8, 7, 9, 10, 9, 10], // From 3
    [3, 2, 2, 3, 0, 2, 3, 2, 4, 5, 4, 6, 7, 6, 7], // From 4
    [5, 4, 4, 5, 2, 0, 1, 2, 4, 5, 4, 6, 7, 6, 7], // From 5
    [6, 5, 5, 6, 3, 1, 0, 3, 5, 6, 5, 7, 8, 7, 8], // From 6
    [5, 4, 4, 5, 2, 2, 3, 0, 2, 3, 2, 4, 5, 4, 5], // From 7
    [7, 6, 6, 7, 4, 4, 5, 2, 0, 1, 2, 4, 5, 4, 5], // From 8
    [8, 7, 7, 8, 5, 5, 6, 3, 1, 0, 3, 5, 6, 5, 6], // From 9
    [7, 6, 6, 7, 4, 4, 5, 2, 2, 3, 0, 2, 3, 2, 3], // From 10
    [9, 8, 8, 9, 6, 6, 7, 4, 4, 5, 2, 0, 1, 2, 3], // From 11
    [10, 9, 9, 10, 7, 7, 8, 5, 5, 6, 3, 1, 0, 3, 4], // From 12
    [9, 8, 8, 9, 6, 6, 7, 4, 4, 5, 2, 2, 3, 0, 1], // From 13
    [10, 9, 9, 10, 7, 7, 8, 5, 5, 6, 3, 3, 4, 1, 0], // From 14
];

const ID_2_TO_COORDINATES : [(i32, i32); 23] = [
    (0, 0),
    (1, 0),
    (2, 1),
    (2, 2),
    (2, 3),
    (2, 4),
    (3, 0),
    (4, 1),
    (4, 2),
    (4, 3),
    (4, 4),
    (5, 0),
    (6, 1),
    (6, 2),
    (6, 3),
    (6, 4),
    (7, 0),
    (8, 1),
    (8, 2),
    (8, 3),
    (8, 4),
    (9, 0),
    (10, 0),
];

const fn compute_distances_2() -> [[usize; 23]; 23] {
    let mut distances = [[0; 23]; 23];

    let mut a = 0;
    loop {
        let mut b = 0;
        loop {
            let a_coord = ID_2_TO_COORDINATES[a];
            let b_coord = ID_2_TO_COORDINATES[b];

            let distance = ((b_coord.0 - a_coord.0).abs() + a_coord.1 + b_coord.1) as usize;

            distances[a][b] = distance;

            b += 1;
            if b == 23 {
                break;
            }
        }
        a += 1;
        if a == 23 {
            break;
        }
    }

    distances
}

pub static DISTANCES_2 : [[usize; 23]; 23] = compute_distances_2();
